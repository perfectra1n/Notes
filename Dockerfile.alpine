# Build stage
FROM node:20.15.1-alpine AS build

# Configure system dependencies
RUN apk add --no-cache --virtual .build-dependencies \
    autoconf \
    automake \
    g++ \
    gcc \
    libtool \
    make \
    nasm \
    libpng-dev \
    python3

# Create app directory
WORKDIR /usr/src/app

# Bundle app source
COPY . .
COPY server-package.json package.json

# Copy TypeScript build artifacts and build the app
RUN cp -R build/src/* src/. && \
    cp build/docker_healthcheck.js . && \
    rm -r build && \
    rm docker_healthcheck.ts && \
    npm install && \
    npm run webpack && \
    cp src/public/app/share.js src/public/app-dist/. && \
    cp -r src/public/app/doc_notes src/public/app-dist/. && \
    rm -rf src/public/app && \
    rm src/services/asset_path.ts && \
    npm prune --omit=dev

# Runtime stage
FROM node:20.15.1-alpine

# Install runtime dependencies
RUN apk add --no-cache su-exec shadow

# Create app directory
WORKDIR /usr/src/app

# Copy the entire app directory from build stage
COPY --from=build /usr/src/app .

# Add application user
RUN adduser -s /bin/false node || true

# Start the application
EXPOSE 8080
CMD [ "./start-docker.sh" ]

HEALTHCHECK --start-period=10s CMD exec su-exec node node docker_healthcheck.js